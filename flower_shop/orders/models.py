import asyncio
from bot.utils import send_message
from users.models import UserProfile, NotificationLog
from catalog.models import Flower
from django.contrib.auth import get_user_model
from django.db import models
from django.utils.timezone import now, timedelta
from django.db.models.signals import post_save
from django.dispatch import receiver
from django.contrib import admin
from django.utils.html import mark_safe
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

User = get_user_model()

SHOP_NAME = "–¶–≤–µ—Ç–æ—á–Ω–∞—è –õ–∞–≤–∫–∞"
SHOP_NAME_E = "–¶–≤–µ—Ç–æ—á–Ω–æ–π –õ–∞–≤–∫–µ"

class OrderItem(models.Model):
    order = models.ForeignKey('Order', on_delete=models.CASCADE, related_name='items')
    flower = models.ForeignKey(Flower, on_delete=models.CASCADE)
    quantity = models.PositiveIntegerField(default=1)
    price = models.DecimalField(max_digits=10, decimal_places=2)  # –¶–µ–Ω–∞ –∑–∞ –µ–¥–∏–Ω–∏—Ü—É –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–∫–∞–∑–∞
    subtotal = models.DecimalField(max_digits=10, decimal_places=2)  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)

    def __str__(self):
        return f"{self.flower.name} x {self.quantity}"

class Order(models.Model):
    STATUS_CHOICES = [
        ("awaiting_payment", "–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã"),
        ("pending", "–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏"),
        ("processing", "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ"),
        ("shipped", "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
        ("delivered", "–î–æ—Å—Ç–∞–≤–ª–µ–Ω"),
        ("canceled", "–û—Ç–º–µ–Ω–µ–Ω"),
    ]

    user = models.ForeignKey(UserProfile, on_delete=models.CASCADE, verbose_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", related_name="orders")
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default="awaiting_payment", verbose_name="–°—Ç–∞—Ç—É—Å")
    created_at = models.DateTimeField(auto_now_add=True, verbose_name="–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è")
    total_price = models.DecimalField(max_digits=10, decimal_places=2, default=0)  # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞
    address = models.CharField(max_length=255, blank=True, null=True)  # –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏

    def __str__(self):
        return f"–ó–∞–∫–∞–∑ {self.id} - {self.user.full_name}"

    def is_payment_overdue(self):
        if self.status == "awaiting_payment":
            return now() > self.created_at + timedelta(hours=24)
        return False

    def duplicate_order(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ."""
        new_order = Order.objects.create(user=self.user, status="awaiting_payment", total_price=self.total_price, address=self.address)
        for item in self.items.all():
            OrderItem.objects.create(order=new_order, flower=item.flower, quantity=item.quantity, price=item.price, subtotal=item.subtotal)
        return new_order

    def get_order_summary(self):
        """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è Telegram."""
        items_list = "\n".join([f"{item.flower.name} x {item.quantity} - {item.subtotal} —Ä—É–±." for item in self.items.all()])
        return (
            f"–ó–∞–∫–∞–∑ #{self.id}\n"
            f"–°–æ—Å—Ç–∞–≤:\n{items_list}\n"
            f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {self.total_price} —Ä—É–±.\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {self.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )

    def send_telegram_notification(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –∫–Ω–æ–ø–∫–æ–π '–û—Ç–º–µ–Ω–∏—Ç—å' —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
        if not self.user.telegram_id:
            return
        
        message = self.get_order_summary()
        # –ö–Ω–æ–ø–∫–∞ "–û—Ç–º–µ–Ω–∏—Ç—å" —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
        if self.status in ["awaiting_payment", "pending", "processing"]:
            callback_data = f"cancel_order_{self.id}"
            button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=callback_data)
            keyboard = [[button]]
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        else:
            reply_markup = None

        send_message(self.user.telegram_id, message, reply_markup=reply_markup)

@receiver(post_save, sender=Order)
def send_status_update(sender, instance, created, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞."""

    if not instance.user.telegram_id:
        if not instance.user.notified_to_join_bot:
            message = f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –±–æ—Ç–æ–º –ø–æ –Ω–æ–º–µ—Ä—É {instance.user.phone} –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
            instance.user.notified_to_join_bot = True
            instance.user.save()
            NotificationLog.objects.create(user=instance.user, message=message)
        return

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ (—Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–º–µ–Ω–∏—Ç—å")
    if created and instance.status == "awaiting_payment":
        instance.send_telegram_notification()
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ –∫–Ω–æ–ø–æ–∫)
    elif not created:
        if instance.status == "delivered":
            message = (
                f"–í–∞—à –∑–∞–∫–∞–∑ #{instance.id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω!\n"
                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å! –ñ–¥—ë–º –≤–∞—Å —Å–Ω–æ–≤–∞ –≤ –Ω–∞—à–µ–π {SHOP_NAME_E} üå∏"
            )
        else:
            message = f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{instance.id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {instance.get_status_display()}"
        send_message(instance.user.telegram_id, message)
        NotificationLog.objects.create(user=instance.user, message=message)