import asyncio
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher, Router, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from django.core.exceptions import ObjectDoesNotExist
from orders.models import User, Order
from aiogram.client.default import DefaultBotProperties
from bot.config import TOKEN, ADMIN_IDS

from users.models import UserProfile

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phone_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    profile = await sync_to_async(UserProfile.get_by_telegram_id)(telegram_id)

    if profile:
        response_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"üìç Telegram ID: <code>{telegram_id}</code>\n"
            f"üë§ –ò–º—è: {profile.full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –ê–¥—Ä–µ—Å: {profile.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
    else:
        response_text = (
            f"‚ö†Ô∏è –í–∞—à Telegram ID: <code>{telegram_id}</code>\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é."
        )

    await message.answer(response_text, reply_markup=phone_keyboard)

@dp.message(lambda message: message.contact)
async def process_contact(message: types.Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = message.contact.phone_number.strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone_number.startswith("8"):
        phone_number = "+7" + phone_number[1:]
    elif phone_number.startswith("7"):
        phone_number = "+" + phone_number

    try:
        profile = await sync_to_async(UserProfile.objects.get)(phone=phone_number)  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º `UserProfile`

        if profile:
            profile.telegram_id = message.from_user.id
            await sync_to_async(profile.save)()
            await message.answer("‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞.")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number}")

@dp.message(Command("unlink"))
async def unlink_telegram(message: types.Message):
    """–û—Ç–≤—è–∑–∫–∞ Telegram ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await sync_to_async(UserProfile.objects.get)(telegram_id=message.from_user.id)
        user.telegram_id = None
        await sync_to_async(user.save)()
        await message.answer("‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.")
    except ObjectDoesNotExist:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à Telegram ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.")

@dp.message(Command("admin_link"))
async def admin_link_user(message: types.Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin_link <–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞> <telegram_id>`")
        return

    phone_number, telegram_id = args[1], args[2]

    try:
        user = await sync_to_async(UserProfile.objects.get)(phone=phone_number)
        user.telegram_id = telegram_id
        await sync_to_async(user.save)()
        await message.answer(f"‚úÖ Telegram ID {telegram_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {phone_number}.")
    except ObjectDoesNotExist:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@dp.message(Command("admin_unlink"))
async def admin_unlink_user(message: types.Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤—è–∑—ã–≤–∞–µ—Ç Telegram ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    args = message.text.split()
    if len(args) != 2:
        await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/admin_unlink <–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞>`")
        return

    phone_number = args[1]

    try:
        user = await sync_to_async(UserProfile.objects.get)(phone=phone_number)
        user.telegram_id = None
        await sync_to_async(user.save)()
        await message.answer(f"‚úÖ Telegram ID —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {phone_number}.")
    except ObjectDoesNotExist:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def send_payment_reminders():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
    while True:
        await asyncio.sleep(3600)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —á–∞—Å

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º sync_to_async –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        overdue_orders = await sync_to_async(list)(Order.objects.filter(status="awaiting_payment"))
        for order in overdue_orders:
            if order.is_payment_overdue() and order.user.telegram_id:
                await bot.send_message(
                    order.user.telegram_id,
                    f"‚ö†Ô∏è –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ."
                )

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    asyncio.create_task(send_payment_reminders())  # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

