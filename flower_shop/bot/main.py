import asyncio
from asgiref.sync import sync_to_async
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from django.core.exceptions import ObjectDoesNotExist
from orders.models import Order
from aiogram.client.default import DefaultBotProperties
from bot.config import TOKEN, ADMIN_IDS
from aiogram.types import CallbackQuery
from cart.views import is_working_hours
from users.models import UserProfile

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode='HTML'))
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
phone_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    telegram_id = message.from_user.id
    profile = await sync_to_async(UserProfile.get_by_telegram_id)(telegram_id)

    if profile:
        response_text = (
            f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n"
            f"üìç Telegram ID: <code>{telegram_id}</code>\n"
            f"üë§ –ò–º—è: {profile.full_name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {profile.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
            f"üìç –ê–¥—Ä–µ—Å: {profile.address or '–ù–µ —É–∫–∞–∑–∞–Ω'}"
        )
    else:
        response_text = (
            f"‚ö†Ô∏è –í–∞—à Telegram ID: <code>{telegram_id}</code>\n\n"
            "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. "
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø—Ä–æ—Ñ–∏–ª—é."
        )

    await bot.send_message(message.chat.id, response_text, reply_markup=phone_keyboard)

@dp.message(lambda message: message.contact)
async def process_contact(message: types.Message):
    """–ü—Ä–∏–≤—è–∑–∫–∞ Telegram ID –∫ –∞–∫–∫–∞—É–Ω—Ç—É –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = message.contact.phone_number.strip().replace(" ", "").replace("-", "").replace("(", "").replace(")", "")
    if phone_number.startswith("8"):
        phone_number = "+7" + phone_number[1:]
    elif phone_number.startswith("7"):
        phone_number = "+" + phone_number

    try:
        profile = await sync_to_async(UserProfile.objects.get)(phone=phone_number)
        if profile:
            profile.telegram_id = message.from_user.id
            await sync_to_async(profile.save)()
            await bot.send_message(message.chat.id, "‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É!")
        else:
            await bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –Ω–æ–º–µ—Ä–∞.")
    except Exception as e:
        await bot.send_message(message.chat.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}\n–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ {phone_number}")

@dp.message(Command("unlink"))
async def unlink_telegram(message: types.Message):
    """–û—Ç–≤—è–∑–∫–∞ Telegram ID –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = await sync_to_async(UserProfile.objects.get)(telegram_id=message.from_user.id)
        user.telegram_id = None
        await sync_to_async(user.save)()
        await bot.send_message(message.chat.id, "‚úÖ –í–∞—à Telegram —É—Å–ø–µ—à–Ω–æ –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞.")
    except ObjectDoesNotExist:
        await bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞: –≤–∞—à Telegram ID –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∞–∫–∫–∞—É–Ω—Ç—É.")

async def check_payment_reminders():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ"""
    if not await sync_to_async(is_working_hours)():
        return
    overdue_orders = await sync_to_async(list)(Order.objects.filter(status="awaiting_payment").select_related('user'))
    for order in overdue_orders:
        is_overdue = await sync_to_async(order.is_payment_overdue)()
        if not hasattr(order, 'user') or not order.user:
            for admin_id in ADMIN_IDS:
                await bot.send_message(
                    admin_id,
                    f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order.id} –ø—Ä–æ–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                )
                print(f"–ó–∞–∫–∞–∑ #{order.id} –ø—Ä–æ–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É–≤–µ–¥–æ–º–ª–µ–Ω –∞–¥–º–∏–Ω")
            continue
        
        if is_overdue:
            if order.user.telegram_id:
                await bot.send_message(
                    order.user.telegram_id,
                    f"‚ö†Ô∏è –í–∞—à –∑–∞–∫–∞–∑ #{order.id} –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –µ–≥–æ."
                )
                print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.id}")
            else:
                for admin_id in ADMIN_IDS:
                    await bot.send_message(
                        admin_id,
                        f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order.id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω, –Ω–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {order.user.full_name} (—Ç–µ–ª–µ—Ñ–æ–Ω: {order.user.phone}) –Ω–µ—Ç telegram_id."
                    )
                print(f"–ó–∞–∫–∞–∑ #{order.id} –ø—Ä–æ–ø—É—â–µ–Ω: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id, —É–≤–µ–¥–æ–º–ª–µ–Ω –∞–¥–º–∏–Ω")

async def send_payment_reminders():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–∫–∞–∑—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
    while True:
        await check_payment_reminders()
        await asyncio.sleep(10800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —Ç—Ä–∏ —á–∞—Å–∞

@dp.callback_query(lambda callback: callback.data.startswith("cancel_order_"))
async def cancel_order(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É '–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑' —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."""
    order_id = int(callback.data.split("_")[-1])
    order = await sync_to_async(Order.objects.get)(id=order_id)

    if order.status not in ["shipped", "delivered", "canceled"]:
        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"confirm_cancel_{order_id}")],
            [InlineKeyboardButton(text="–ù–µ—Ç", callback_data=f"cancel_no_{order_id}")]
        ])
        await bot.edit_message_text(
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}?\n\n{await sync_to_async(order.get_order_summary)()}",
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=confirm_keyboard
        )
        await bot.answer_callback_query(callback.id)
    else:
        await bot.edit_message_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id}:\n\n{await sync_to_async(order.get_order_summary)()}",
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
        await bot.answer_callback_query(callback.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω.")

@dp.callback_query(lambda callback: callback.data.startswith("confirm_cancel_"))
async def confirm_cancel_order(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split("_")[-1])
    order = await sync_to_async(Order.objects.get)(id=order_id)

    if order.status not in ["shipped", "delivered", "canceled"]:
        order.status = "canceled"
        await sync_to_async(order.save)()
        await bot.edit_message_text(
            f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω–µ–Ω.\n\n{await sync_to_async(order.get_order_summary)()}",
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            reply_markup=None
        )
        await bot.answer_callback_query(callback.id, "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    else:
        await bot.answer_callback_query(callback.id, "‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑: –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")

@dp.callback_query(lambda callback: callback.data.startswith("cancel_no_"))
async def cancel_no(callback: CallbackQuery):
    """–û—Ç–∫–∞–∑ –æ—Ç –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞."""
    order_id = int(callback.data.split("_")[-1])
    order = await sync_to_async(Order.objects.get)(id=order_id)
    order_summary = await sync_to_async(order.get_order_summary)()
    
    cancel_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"cancel_order_{order_id}")]
    ])
    reply_markup = cancel_keyboard if order.status in ["awaiting_payment", "pending", "processing"] else None
    await bot.edit_message_text(
        text=order_summary,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=reply_markup
    )
    await bot.answer_callback_query(callback.id, "–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    asyncio.create_task(send_payment_reminders())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
